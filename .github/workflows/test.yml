name: 自动化测试

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']
        django-version: ['4.2', '4.1']

    steps:
    - uses: actions/checkout@v3
    
    - name: 设置Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install Django==${{ matrix.django-version }}
        pip install -r requirements.txt
        pip install coverage pytest pytest-django pytest-cov
    
    - name: 运行数据库迁移
      run: |
        python manage.py migrate --settings=study_room_system.test_settings
    
    - name: 运行单元测试
      run: |
        python manage.py test --settings=study_room_system.test_settings --verbosity=2
    
    - name: 运行覆盖率测试
      run: |
        coverage run --source='.' manage.py test --settings=study_room_system.test_settings
        coverage report
        coverage xml
    
    - name: 上传覆盖率报告到Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
    
    - name: 运行代码检查
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 运行安全检查
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
    
    - name: 上传测试报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ matrix.python-version }}-django${{ matrix.django-version }}
        path: |
          htmlcov/
          bandit-report.json
          coverage.xml

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: 设置Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 运行集成测试
      run: |
        python manage.py test tests.integration_tests --settings=study_room_system.test_settings --verbosity=2
    
    - name: 运行性能测试
      run: |
        python manage.py test tests.performance_tests --settings=study_room_system.test_settings --verbosity=2

  deploy-test:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: 设置Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 运行部署检查
      run: |
        python manage.py check --deploy --settings=study_room_system.settings
    
    - name: 收集静态文件
      run: |
        python manage.py collectstatic --noinput --settings=study_room_system.settings
    
    - name: 通知部署状态
      run: |
        echo "✅ 所有测试通过，可以部署到生产环境"
